Import-Module .\TrErrorHandling\TrErrorHandling.psm1

#=========================================#
#																				 #
# User input and validation							 #
#																				 #
#=========================================#

<#
.SYNOPSIS

Validates that the input value is a string

.PARAMETER Value

The string value to validate
#>
function Confirm-TrValidString {
	Param (
		[ValidateNotNullOrEmpty()]
		[string] $Value
	)
	Return $Value
}

<#
.SYNOPSIS

Validates that the input value is an email address

.PARAMETER Value

The email address value/string to validate
#>
function Confirm-TrValidEmailAddress {
	Param (
		[ValidateNotNullOrEmpty()]
		[mailaddress] $Value
	)
	Return $Value
}

<#
.SYNOPSIS

Validates that the input value is a valid machine name

.PARAMETER Value

The machine name value/string to validate
#>
function Confirm-TrValidMachineName {
	Param (
		[ValidatePattern('^\w[\w\d\-]+$')]
		[string] $Value
	)
	Return $Value
}

<#
.SYNOPSIS

Validates that the input value is a valid GUID

.PARAMETER Value

The GUID value/string to validate
#>
function Confirm-TrValidGuid {
	Param (
		[ValidatePattern('[a-g\d]{8}-[a-g\d]{4}-[a-g\d]{4}-[a-g\d]{4}-[a-g\d]{12}$')]
		[string] $Value
	)
	Return $Value
}

<#
.SYNOPSIS

Prompts the user for input with a message and continues to do so until
their response passes the expected validation function

.PARAMETER Prompt

The prompt that will be shown to the user to request their input

.PARAMETER ValidateCallable

A function that can be called to validate the value the user enters

.PARAMETER ErrorMessage

A custom error message to use instead of the one generated by Write-TrInvalid

.LINK

Write-TrInvalid
#>
function Read-TrUserInput {
	Param (
		[ValidateNotNullOrEmpty()]
		[string] $Prompt,
		[ValidateScript( { Get-Command $_ -ErrorAction SilentlyContinue })]
		[string] $ValidateCallable,
		[string] $ErrorMessage = ""
	)
	$Valid = $False
	Do {
		Try {
			$Value = Read-Host $Prompt
			$Valid = (&$ValidateCallable -Value $Value)
		}
		Catch {
			Write-TrInvalid -Got $Value -Expected $ValidateCallable
		}
	} Until ($Valid)
	Return $Value
}

